EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
H3_8_Sub_Data_Via_Memory_Location.exe_ -- emu8086 assembler version: 4.08  
 
[ 10-09-2022  --  10:17:03 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       DATA    SEGMENT
[   2]    0000: 99                                    N1 DB 99H;User Defined N1 Variable Which Is Byte Type Has 99H Value
[   3]    0001: 88                                    N2 DB 88H;User Defined N2 Variable Which Is Byte Type Has 88H Value
[   4]    0002: 00                                    N3 DB ?;User Defined N2 Variable Which Is Byte Type Has No Value
[   5]        :                                       DATA    ENDS
[   6]        :                                       
[   7]        :                                       
[   8]        :                                       
[   9]        :                                       CODE    SEGMENT ;Segment Declaration
[  10]        :                                       
[  11]        :                                       ASSUME CS:CODE,DS:DATA ;Assume CODE As CS(Code Segment)-->Directly Loaded(Along With SS)
[  12]        :                                       ;Assume DATA As DS(Data Segemnt)-->Not Loaded(Along With ES)
[  13]        :                                       
[  14]        :                                       ;For Initializing Data Segment
[  15]        :                                       ;AX Will Start From 003 Since 3Bytes(1+1+1) Are Reserved To DS
[  16]    0010: B8 00 00                              START:  MOV AX,DATA ;Storing Offset Address Of DATA In AX
[  17]    0013: 8E D8                                 MOV DS,AX ;Moving Address OF Code To DS To Load Data Segment
[  18]        :                                       
[  19]    0015: A0 00 00                              MOV AL,N1 ;Making AL = 88H Since In Subtraction Both Operands Cannot Be Memory Operand-->AL Segment
[  20]        :                                       
[  21]    0018: 2A 06 01 00                           SUB AL,N2 ;Subtracting AL And N2 And Stores The Difference Value
[  22]        :                                       
[  23]    001C: 73 02                                 JNC L1 ;Jump To L1 If Borrow Is Not Generated
[  24]    001E: F6 D8                                 NEG AL ;NEG Destination;2's Complement;Why????
[  25]        :                                       
[  26]    0020: A2 02 00                              L1:     MOV N3,AL ;Stores Answer In N3
[  27]        :                                       ;First Lower Byte Is Stored And Then Upper Byte
[  28]        :                                       
[  29]        :                                       ;Terminating DOS?? Function By Making AX=4C00H
[  30]        :                                       ;09H Display Screen Function
[  31]    0023: B8 00 4C                              MOV AX,4C00H ;Replacing Value At AX With 4C00H
[  32]    0026: CD 21                                 INT 21H ;Interrupt Function
[  33]        :                                       
[  34]        :                                       CODE    ENDS
[  35]        :                                       
[  36]        :                                       END START
[  37]        :                                       
[  38]        :                                       ;(1 Memory Location For Each = 8 Bit)
[  39]        :                                       ;DB = Defined Byte (8 Bit)(Eg. N1 = 25H,23H,55H)
[  40]        :                                       ;DW = Defined Word (16 Bit)
[  41]        :                                       ;DD = Double Word (32 Bit)
[  42]        :                                       ;DQ = Quad Word (64 Bit)
[  43]        :                                       ;DT = Ten Word (80 Bit)
[  44]        :                                       
[  45]        :                                       ;To Change Data While Running Initialize The DS And Then CHange The Value At The Memory Locations In Memory Menu
[  46]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 28      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 1A      -   check sum (l.byte)
0013: E3      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
