EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
H4_16_Mul_Data.exe_ -- emu8086 assembler version: 4.08  
 
[ 10-09-2022  --  10:45:38 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       CODE    SEGMENT ;Segment Declaration
[   2]        :                                       
[   3]        :                                       ASSUME CS:CODE ;Assume CODE As CS(Code Segment)-->Directly Loaded(Along With SS)
[   4]        :                                       
[   5]    0000: B8 99 99                              START:  MOV AX,9999H ;Making AX = 9999H Since In Multiplication Both Operands Cannot Be Direct Values
[   6]    0003: BB 88 88                              MOV BX,8888H ;Making BX = 8888H Since In Multiplication Both Operands Cannot Be Direct Values
[   7]        :                                       
[   8]    0006: F7 E3                                 MUL BX ;Why????
[   9]        :                                       
[  10]    0008: 8B D8                                 MOV BX,AX ;Stores Answer In BX <Lower Data Value> And DX <Higher Data Value>
[  11]        :                                       
[  12]        :                                       ;Terminating DOS?? Function By Making AX=4C00H
[  13]        :                                       ;09H Display Screen Function
[  14]    000A: B8 00 4C                              MOV AX,4C00H ;Replacing Value At AX With 4C00H
[  15]    000D: CD 21                                 INT 21H ;Interrupt Function
[  16]        :                                       
[  17]        :                                       CODE    ENDS
[  18]        :                                       
[  19]        :                                       END START
[  20]        :                                       
[  21]        :                                       ;We Need Only One Register To Store The Data Since A*B=B*A
[  22]        :                                       ;Direct Data Value As Source Operand Is Not Allowed(Immideate Addressing Mode>
[  23]        :                                       
[  24]        :                                       ;INPUT
[  25]        :                                       ;First Input Must Be In AL And Second As Source Operand(8-Bit)
[  26]        :                                       ;First Input Must Be In AX And Second As Source Operand(16-Bit)
[  27]        :                                       
[  28]        :                                       ;OUTPUT
[  29]        :                                       ;8-Bit : AX Is Used -->16-Bit ANSWER
[  30]        :                                       ;16-Bit ; DX(Upper Value Is Stored Here> And AX(Lower Value Is Stored Here> Both Are Used -->32-Bit ANSWER
[  31]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 0F      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 00      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: E3      -   check sum (l.byte)
0013: 3C      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E to 01FF  -   reserved relocation area  (00) 




===================================================================================================
