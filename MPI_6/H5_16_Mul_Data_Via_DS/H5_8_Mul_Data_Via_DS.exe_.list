EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
H5_8_Mul_Data_Via_DS.exe_ -- emu8086 assembler version: 4.08  
 
[ 10-09-2022  --  11:06:57 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       CODE    SEGMENT ;Segment Declaration
[   2]        :                                       
[   3]        :                                       ASSUME CS:CODE,DS:CODE ;Assume CODE As CS(Code Segment)-->Directly Loaded(Along With SS)
[   4]        :                                       ;And DS(Data Segemnt)-->Not Loaded(Along With ES)
[   5]        :                                       
[   6]    0000: 99 99                                 N1 DW 9999H;User Defined N1 Variable Which Is Word Type Has 9999H Value
[   7]    0002: 88 88                                 N2 DW 8888H;User Defined N2 Variable Which Is Word Type Has 8888H Value
[   8]    0004: 00 00 00 00                           N3 DD ?;;User Defined N3 Variable Which Is Dobule Type(4 Byte) Has No Value
[   9]        :                                       
[  10]        :                                       ;For Initializing Data Segment
[  11]    0008: B8 00 00                              START:  MOV AX,CODE ;Storing Offset Address Of Code In AX
[  12]    000B: 8E D8                                 MOV DS,AX ;Moving Address OF Code To DS To Load Data Segment
[  13]        :                                       
[  14]    000D: A1 00 00                              MOV AX,N1
[  15]    0010: F7 26 02 00                           MUL N2 ;Directly Multiplies N2 With AX Which Has Value Of N1
[  16]        :                                       
[  17]        :                                       ;We Will Be Using Pointer For Storing 32 Bit Data
[  18]        :                                       ;Alternatively We Can Store It In 2 Diffrent Segments
[  19]    0014: BE 04 00                              MOV SI,OFFSET N3;We Can Either Use BX,SI,DI As Pointer For Indirect Addressing Mode
[  20]    0017: 89 04                                 MOV [SI],AX;Storing Lower Value Of Product In N3
[  21]    0019: 89 54 02                              MOV [SI+2],DX;Storing Upper Value Of Product In N3
[  22]        :                                       
[  23]        :                                       ;Terminating DOS?? Function By Making AX=4C00H
[  24]        :                                       ;09H Display Screen Function
[  25]    001C: B8 00 4C                              MOV AX,4C00H ;Replacing Value At AX With 4C00H
[  26]    001F: CD 21                                 INT 21H ;Interrupt Function
[  27]        :                                       
[  28]        :                                       CODE    ENDS
[  29]        :                                       
[  30]        :                                       END START
[  31]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 21      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 5A      -   check sum (l.byte)
0013: 44      -   check sum (h.byte)
0014: 08      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 09      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 00      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
